{"version":3,"sources":["logic/index.tsx","constants.tsx","reducer/index.tsx","components/Board.tsx","App.tsx","serviceWorker.js","components/Piece.tsx","sagas.tsx","index.tsx"],"names":["pieceTypes","genPieceType","Math","floor","random","length","merge","content","piece","mergedContent","map","row","slice","pieceCells","getCells","i","j","y","x","BOARD_WIDTH","BOARD_HEIGHT","Container","styled","table","_templateObject","Cell","td","_templateObject2","CollapsingCell","_templateObject3","Board","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","scoringRows","react_default","a","createElement","style","position","borderBottom","borderLeft","borderTop","borderRight","height","bottom","zIndex","reverse","reversedRowIndex","originalIndex","cell","indexOf","backgroundColor","undefined","borderColor","React","PureComponent","newGame","createAction","setupGame","resolve","nextPiece","endGame","movePiece","deltaX","deltaY","nextPieceEnters","rotate","land","score","collapse","pause","emptyContent","push","emptyContentSmall","mapDispatchToProps","App","_this","keyDown","throttle","bind","assertThisInitialized","document","addEventListener","removeEventListener","ev","keyCode","className","components_Board","padding","display","flexDirection","alignItems","margin","textAlign","onClick","paused","Component","connect","state","Boolean","window","location","hostname","match","Piece","type","arguments","newState","cells","getCells_","color","val","newGameSaga","progressGameSaga","rootSaga","pieceType","nextPieceType","progressTask","regenerator_default","wrap","_context","prev","next","put","getType","payload","fork","sent","take","cancel","stop","_marked","_ref","data","landed","_nextPiece","_piece","collided","_i","_j","_context2","race","delay","takePause","select","_marked2","_context3","takeLatest","_marked3","sagaMiddleware","createSagaMiddleware","store","createStore","action","objectSpread","move","rotatedPiece","count","full","newContent","applyMiddleware","logger","run","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a935623.chunk.js","sourcesContent":["import Piece, { Type as PieceTypes } from '../components/Piece';\n\nconst pieceTypes = ['i', 'j', 'l', 'o', 's', 't', 'z'];\n\nexport function genPieceType(): PieceTypes {\n  const pieceType = pieceTypes[Math.floor(Math.random() * pieceTypes.length)];\n  return pieceType as PieceTypes;\n}\n\nexport function merge(content: string[][], piece?: Piece) {\n  if (!piece) {\n    return content;\n  }\n\n  const mergedContent = content.map(row => row.slice());\n  const pieceCells = piece.getCells();\n\n  for (let i = 0; i < pieceCells.length; i += 1) {\n    for (let j = 0; j < pieceCells[0].length; j += 1) {\n      mergedContent[piece.y + i][piece.x + j] =\n        pieceCells[i][j] + content[piece.y + i][piece.x + j];\n    }\n  }\n\n  return mergedContent;\n}\n","export const BOARD_WIDTH = 10;\r\nexport const BOARD_HEIGHT = 20;\r\n","import { ActionType, createAction, getType } from 'typesafe-actions';\r\nimport Piece from '../components/Piece';\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../constants';\r\nimport { merge } from '../logic';\r\n\r\nexport const newGame = createAction('newGame');\r\n\r\nexport const setupGame = createAction('setupGame', resolve => (piece: Piece, nextPiece: Piece) =>\r\n  resolve({ piece, nextPiece }),\r\n);\r\n\r\nexport const endGame = createAction('endGame');\r\n\r\nexport const movePiece = createAction('movePiece', resolve => (deltaX: number, deltaY: number) =>\r\n  resolve({ deltaX, deltaY }),\r\n);\r\n\r\nexport const nextPieceEnters = createAction(\r\n  'nextPiece',\r\n  resolve => (nextPiece: Piece, piece: Piece) => resolve({ nextPiece, piece }),\r\n);\r\n\r\nexport const rotate = createAction('rotate');\r\n\r\nexport const land = createAction('land');\r\n\r\nexport const score = createAction('score');\r\n\r\nexport const collapse = createAction('collapse');\r\n\r\nexport const pause = createAction('pause');\r\n\r\nexport interface State {\r\n  content: string[][];\r\n  piece?: Piece;\r\n  nextPiece?: Piece;\r\n  score: number;\r\n  scoringRows: number[];\r\n  paused: boolean;\r\n}\r\n\r\nconst actions = {\r\n  newGame,\r\n  setupGame,\r\n  movePiece,\r\n  land,\r\n  nextPieceEnters,\r\n  rotate,\r\n  score,\r\n  collapse,\r\n  pause,\r\n};\r\n\r\ntype Action = ActionType<typeof actions>;\r\n\r\nconst emptyContent: string[][] = [];\r\nfor (let i = 0; i < BOARD_HEIGHT; i += 1) {\r\n  const row: string[] = [];\r\n  for (let j = 0; j < BOARD_WIDTH; j += 1) {\r\n    row.push('');\r\n  }\r\n\r\n  emptyContent.push(row);\r\n}\r\n\r\nexport default function(\r\n  state: State = { content: emptyContent, score: 0, scoringRows: [], paused: false },\r\n  action: Action,\r\n) {\r\n  switch (action.type) {\r\n    case getType(setupGame): {\r\n      return {\r\n        ...state,\r\n        content: emptyContent,\r\n        score: 0,\r\n        piece: action.payload.piece,\r\n        nextPiece: action.payload.nextPiece,\r\n      };\r\n    }\r\n    case getType(movePiece): {\r\n      let piece = state.piece;\r\n      if (piece) {\r\n        const cells = piece.getCells();\r\n        let move = true;\r\n        for (let i = 0; i < cells.length && move; i += 1) {\r\n          for (let j = 0; j < cells[0].length && move; j += 1) {\r\n            if (\r\n              piece.y + i + action.payload.deltaY < 0 ||\r\n              piece.x + j + action.payload.deltaX < 0 ||\r\n              piece.x + j + action.payload.deltaX >= BOARD_WIDTH\r\n            ) {\r\n              move = false;\r\n            } else if (\r\n              state.content[piece.y + i + action.payload.deltaY]\r\n                [piece.x + j + action.payload.deltaX] &&\r\n              cells[i][j]\r\n            ) {\r\n              move = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (move) {\r\n          piece = piece.move(action.payload.deltaX, action.payload.deltaY);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        piece,\r\n      };\r\n    }\r\n    case getType(land): {\r\n      const content = merge(state.content, state.piece);\r\n      return { ...state, content };\r\n    }\r\n    case getType(nextPieceEnters): {\r\n      return {\r\n        ...state,\r\n        piece: action.payload.piece,\r\n        nextPiece: action.payload.nextPiece,\r\n      };\r\n    }\r\n    case getType(rotate): {\r\n      let piece = state.piece;\r\n      if (piece) {\r\n        const rotatedPiece = piece.rotate();\r\n        const cells = rotatedPiece.getCells();\r\n        let rotate = true;\r\n        for (let i = 0; i < cells.length && rotate; i += 1) {\r\n          for (let j = 0; j < cells[0].length && rotate; j += 1) {\r\n            if (\r\n              rotatedPiece.y + i >= BOARD_HEIGHT ||\r\n              rotatedPiece.x + j < 0 ||\r\n              rotatedPiece.x + j >= BOARD_WIDTH\r\n            ) {\r\n              rotate = false;\r\n            } else if (state.content[rotatedPiece.y + i][rotatedPiece.x + j] && cells[i][j]) {\r\n              rotate = false;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (rotate) {\r\n          piece = rotatedPiece;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        piece,\r\n      };\r\n    }\r\n    case getType(score): {\r\n      const content = state.content;\r\n      let count = 0;\r\n      const scoringRows = [];\r\n      for (let i = 0; i < BOARD_HEIGHT; i += 1) {\r\n        const row = content[i];\r\n        let full = true;\r\n        for (let j = 0; j < row.length && full; j += 1) {\r\n          if (!row[j]) {\r\n            full = false;\r\n          }\r\n        }\r\n\r\n        if (full) {\r\n          count += 1;\r\n          scoringRows.push(i);\r\n        }\r\n      }\r\n\r\n      let score = state.score;\r\n      if (count === 1) {\r\n        score += 10;\r\n      } else if (count === 2) {\r\n        score += 20;\r\n      } else if (count === 3) {\r\n        score += 40;\r\n      } else if (count === 4) {\r\n        score += 80;\r\n      }\r\n\r\n      return { ...state, score, scoringRows };\r\n    }\r\n    case getType(collapse): {\r\n      const content = state.content;\r\n      const scoringRows = state.scoringRows;\r\n      const newContent = [] as string[][];\r\n      for (let i = 0; i < content.length; i += 1) {\r\n        if (scoringRows.indexOf(i) < 0) {\r\n          newContent.push(content[i]);\r\n        }\r\n      }\r\n      for (let i = 0; i < scoringRows.length; i += 1) {\r\n        const row = [] as string[];\r\n        for (let j = 0; j < BOARD_WIDTH; j += 1) {\r\n          row.push('');\r\n        }\r\n        newContent.push(row);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        content: newContent,\r\n        scoringRows: [],\r\n      };\r\n    }\r\n    case getType(pause): {\r\n      return { ...state, paused: !state.paused };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Piece from './Piece';\r\nimport { merge } from '../logic';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../constants';\r\n\r\nconst Container = styled.table`\r\n  border-collapse: collapse;\r\n`;\r\ninterface CellProps {\r\n  collapse?: boolean;\r\n}\r\n\r\nconst Cell = styled.td`\r\n  width: 25px;\r\n  height: 25px;\r\n  padding: 0;\r\n`;\r\n\r\nconst CollapsingCell = styled.td`\r\n  width: 25px;\r\n  height: 0;\r\n  animation: collapse 250ms;\r\n  padding: 0;\r\n`;\r\n\r\ninterface BoardProps {\r\n  piece?: Piece;\r\n  content: string[][];\r\n  scoringRows: number[];\r\n}\r\n\r\nclass Board extends React.PureComponent<BoardProps, {}> {\r\n  constructor(props: BoardProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { piece, content, scoringRows } = this.props;\r\n\r\n    const mergedContent = merge(content, piece);\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          borderBottom: '1px solid grey',\r\n          borderLeft: '1px solid grey',\r\n        }}\r\n      >\r\n        <Container>\r\n          <tbody>\r\n            {content.map(row => (\r\n              <tr>\r\n                {row.map(() => (\r\n                  <Cell>\r\n                    <div\r\n                      style={{\r\n                        borderTop: '1px solid grey',\r\n                        borderRight: '1px solid grey',\r\n                        height: '100%',\r\n                      }}\r\n                    />\r\n                  </Cell>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Container>\r\n        <Container style={{ position: 'absolute', bottom: 0, zIndex: -1 }}>\r\n          <tbody>\r\n            {mergedContent.reverse().map((row, reversedRowIndex) => {\r\n              const originalIndex = BOARD_HEIGHT - 1 - reversedRowIndex;\r\n              return (\r\n                <tr>\r\n                  {row.map(cell => {\r\n                    return scoringRows.indexOf(originalIndex) >= 0 ? (\r\n                      <CollapsingCell\r\n                        style={{ backgroundColor: cell || undefined, borderColor: 'transparent' }}\r\n                      />\r\n                    ) : (\r\n                      <Cell\r\n                        style={{ backgroundColor: cell || undefined, borderColor: 'transparent' }}\r\n                      />\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board';\r\nimport { throttle } from 'lodash';\r\nimport { newGame, State, movePiece, rotate, pause } from './reducer';\r\nimport { connect } from 'react-redux';\r\n\r\nconst emptyContentSmall: string[][] = [];\r\nfor (let i = 0; i < 2; i += 1) {\r\n  const row: string[] = [];\r\n  for (let j = 0; j < 4; j += 1) {\r\n    row.push('');\r\n  }\r\n\r\n  emptyContentSmall.push(row);\r\n}\r\n\r\nfunction mapStateToProps(state: State) {\r\n  return {\r\n    content: state.content,\r\n    piece: state.piece,\r\n    nextPiece: state.nextPiece,\r\n    score: state.score,\r\n    paused: state.paused,\r\n    scoringRows: state.scoringRows,\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = { newGame, movePiece, rotate, pause };\r\n\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\ninterface AppProps extends ReturnType<typeof mapStateToProps>, DispatchProps {}\r\n\r\nclass App extends Component<AppProps, {}> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n\r\n    this.keyDown = throttle(this.keyDown.bind(this), 50);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.keyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.keyDown);\r\n  }\r\n\r\n  keyDown(ev: KeyboardEvent) {\r\n    if (ev.keyCode === 37) {\r\n      this.props.movePiece(-1, 0);\r\n    } else if (ev.keyCode === 39) {\r\n      this.props.movePiece(1, 0);\r\n    } else if (ev.keyCode === 40) {\r\n      this.props.movePiece(0, -1);\r\n    } else if (ev.keyCode === 38) {\r\n      this.props.rotate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { content, piece, nextPiece, score, scoringRows } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <Board piece={piece} content={content} scoringRows={scoringRows} />\r\n        <div\r\n          style={{\r\n            padding: '20px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <div style={{ margin: '25px' }}>Score: {score}</div>\r\n          <div>\r\n            <div style={{ margin: '15px', textAlign: 'center' }}>Next Piece:</div>\r\n            <Board piece={nextPiece} content={emptyContentSmall} scoringRows={[]} />\r\n          </div>\r\n          <div style={{ margin: '25px' }}>\r\n            <button onClick={this.props.newGame}>New Game</button>\r\n          </div>\r\n          <div style={{ margin: '25px' }}>\r\n            <button onClick={this.props.pause}>{this.props.paused ? 'Resume' : 'Pause'}</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export type Type = 'i' | 'j' | 'l' | 'o' | 's' | 't' | 'z';\ntype State = 0 | 1 | 2 | 3;\n\nclass Piece {\n  readonly x: number;\n  readonly y: number;\n  readonly type: Type;\n  readonly state: State;\n\n  constructor(x: number, y: number, type: Type, state: State = 0) {\n    this.x = x;\n    this.y = y;\n    this.type = type;\n    this.state = state;\n  }\n\n  public rotate() {\n    let newState: State = 0;\n    if (this.state === 0) {\n      newState = 3;\n    } else if (this.state === 1) {\n      newState = 0;\n    } else if (this.state === 2) {\n      newState = 1;\n    } else if (this.state === 3) {\n      newState = 2;\n    }\n\n    return new Piece(this.x, this.y, this.type, newState);\n  }\n\n  public move(deltaX: number, deltaY: number) {\n    return new Piece(this.x + deltaX, this.y + deltaY, this.type, this.state);\n  }\n\n  public getCells(): string[][] {\n    const cells = this.getCells_();\n    let color = '';\n    if (this.type === 'i') {\n      color = '#00bcd4';\n    } else if (this.type === 'j') {\n      color = '#2196f3';\n    } else if (this.type === 'l') {\n      color = '#ff9800';\n    } else if (this.type === 'o') {\n      color = '#ffeb3b';\n    } else if (this.type === 's') {\n      color = '#4caf50';\n    } else if (this.type === 't') {\n      color = '#9c27b0';\n    } else if (this.type === 'z') {\n      color = '#f44336';\n    }\n\n    return cells.map(row => row.map(val => (val ? color : '')));\n  }\n\n  getCells_(): boolean[][] {\n    if (this.type === 'i') {\n      if (this.state === 1 || this.state === 3) {\n        return [[true], [true], [true], [true]];\n      }\n      return [[true, true, true, true]];\n    }\n    if (this.type === 'j') {\n      if (this.state === 0) {\n        return [[true, true, true], [false, false, true]];\n      }\n      if (this.state === 1) {\n        return [[false, true], [false, true], [true, true]];\n      }\n      if (this.state === 2) {\n        return [[true, false, false], [true, true, true]];\n      }\n      return [[true, true], [true, false], [true, false]];\n    }\n    if (this.type === 'l') {\n      if (this.state === 0) {\n        return [[true, true, true], [true, false, false]];\n      }\n      if (this.state === 1) {\n        return [[true, true], [false, true], [false, true]];\n      }\n      if (this.state === 2) {\n        return [[false, false, true], [true, true, true]];\n      }\n      return [[true, false], [true, false], [true, true]];\n    }\n    if (this.type === 'o') {\n      return [[true, true], [true, true]];\n    }\n    if (this.type === 's') {\n      if (this.state === 0 || this.state === 2) {\n        return [[false, true, true], [true, true, false]];\n      }\n      if (this.state === 1 || this.state === 3) {\n        return [[true, false], [true, true], [false, true]];\n      }\n    }\n    if (this.type === 'z') {\n      if (this.state === 0 || this.state === 2) {\n        return [[true, true, false], [false, true, true]];\n      }\n      if (this.state === 1 || this.state === 3) {\n        return [[false, true], [true, true], [true, false]];\n      }\n    }\n    if (this.type === 't') {\n      if (this.state === 0) {\n        return [[true, true, true], [false, true, false]];\n      }\n      if (this.state === 1) {\n        return [[false, true], [true, true], [false, true]];\n      }\n      if (this.state === 2) {\n        return [[false, true, false], [true, true, true]];\n      }\n      return [[true, false], [true, true], [true, false]];\n    }\n    return [[]];\n  }\n}\n\nexport default Piece;\n","import { SagaIterator, delay } from 'redux-saga';\r\nimport { takeLatest, put, fork, take, cancel, call, select, all, race } from 'redux-saga/effects';\r\nimport { getType } from 'typesafe-actions';\r\nimport {\r\n  newGame,\r\n  setupGame,\r\n  endGame,\r\n  movePiece,\r\n  State,\r\n  nextPieceEnters,\r\n  land,\r\n  score,\r\n  collapse,\r\n  pause,\r\n} from './reducer';\r\nimport { genPieceType } from './logic';\r\nimport Piece from './components/Piece';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from './constants';\r\n\r\nfunction* newGameSaga(): SagaIterator {\r\n  const pieceType = genPieceType();\r\n  let piece: Piece;\r\n  if (pieceType === 'i') {\r\n    piece = new Piece(BOARD_WIDTH / 2 - 2, BOARD_HEIGHT - 1, pieceType);\r\n  } else {\r\n    piece = new Piece(BOARD_WIDTH / 2 - 1, BOARD_HEIGHT - 2, pieceType);\r\n  }\r\n\r\n  const nextPieceType = genPieceType();\r\n  let nextPiece: Piece;\r\n  if (nextPieceType === 'i') {\r\n    nextPiece = new Piece(0, 0, nextPieceType);\r\n  } else {\r\n    nextPiece = new Piece(1, 0, nextPieceType);\r\n  }\r\n\r\n  yield put({ type: getType(setupGame), payload: { piece, nextPiece } });\r\n\r\n  const progressTask = yield fork(progressGameSaga);\r\n  yield take(getType(endGame));\r\n\r\n  yield cancel(progressTask);\r\n}\r\n\r\nfunction* progressGameSaga(): SagaIterator {\r\n  while (true) {\r\n    const { takePause } = yield race({\r\n      delay: call(delay, 500),\r\n      takePause: take(getType(pause)),\r\n    });\r\n\r\n    if (takePause) {\r\n      yield take(getType(pause));\r\n    }\r\n\r\n    let data: { content: boolean[][]; piece: Piece; nextPiece: Piece } = yield select(\r\n      (state: State) => {\r\n        return { content: state.content, piece: state.piece, nextPiece: state.nextPiece };\r\n      },\r\n    );\r\n\r\n    let pieceCells = data.piece.getCells();\r\n    let landed = false;\r\n    for (let i = 0; i < pieceCells.length && !landed; i += 1) {\r\n      for (let j = 0; j < pieceCells[0].length && !landed; j += 1) {\r\n        if (data.piece.y - 1 + i < 0) {\r\n          landed = true;\r\n        } else if (pieceCells[i][j] && data.content[data.piece.y - 1 + i][data.piece.x + j]) {\r\n          landed = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (landed) {\r\n      const nextPieceType = genPieceType();\r\n      let nextPiece: Piece;\r\n      if (nextPieceType === 'i') {\r\n        nextPiece = new Piece(0, 0, nextPieceType);\r\n      } else {\r\n        nextPiece = new Piece(1, 0, nextPieceType);\r\n      }\r\n\r\n      let piece: Piece;\r\n      if (data.nextPiece.type === 'i') {\r\n        piece = new Piece(BOARD_WIDTH / 2 - 2, BOARD_HEIGHT - 1, data.nextPiece.type);\r\n      } else {\r\n        piece = new Piece(BOARD_WIDTH / 2 - 1, BOARD_HEIGHT - 2, data.nextPiece.type);\r\n      }\r\n\r\n      yield put({ type: getType(land) });\r\n\r\n      yield put({ type: getType(score) });\r\n\r\n      const scoringRows: number[] = yield select((state: State) => state.scoringRows);\r\n      if (scoringRows.length > 0) {\r\n        // wait for animation of collapsing completes\r\n        yield call(delay, 250);\r\n        yield put({ type: getType(collapse) });\r\n      }\r\n\r\n      yield put({ type: getType(nextPieceEnters), payload: { nextPiece, piece } });\r\n\r\n      // check if new piece collides with current cells\r\n      data = yield select((state: State) => {\r\n        return { content: state.content, piece: state.piece, nextPiece: state.nextPiece };\r\n      });\r\n      let collided = false;\r\n      pieceCells = data.piece.getCells();\r\n      for (let i = 0; i < pieceCells.length && !collided; i += 1) {\r\n        for (let j = 0; j < pieceCells[0].length && !collided; j += 1) {\r\n          if (data.content[data.piece.y + i][data.piece.x + j]) {\r\n            collided = true;\r\n          }\r\n        }\r\n      }\r\n      if (collided) {\r\n        yield put({ type: getType(endGame) });\r\n      }\r\n    } else {\r\n      yield put({ type: getType(movePiece), payload: { deltaX: 0, deltaY: -1 } });\r\n    }\r\n  }\r\n}\r\n\r\nexport default function* rootSaga(): SagaIterator {\r\n  yield takeLatest(getType(newGame), newGameSaga);\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport reducer from './reducer';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nimport logger from 'redux-logger';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware, logger));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}